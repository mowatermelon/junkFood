-- QRTZ表
CREATE TABLE QRTZ_JOB_DETAILS
  (
    JOB_NAME  VARCHAR(80) NOT NULL,
    JOB_GROUP VARCHAR(80) NOT NULL,
    DESCRIPTION VARCHAR(120) NULL,
    JOB_CLASS_NAME   VARCHAR(128) NOT NULL,
    IS_DURABLE VARCHAR(1) NOT NULL,
    IS_VOLATILE VARCHAR(1) NOT NULL,
    IS_STATEFUL VARCHAR(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_JOB_LISTENERS
  (
    JOB_NAME  VARCHAR(80) NOT NULL,
    JOB_GROUP VARCHAR(80) NOT NULL,
    JOB_LISTENER VARCHAR(80) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_TRIGGERS
  (
    TRIGGER_NAME VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    JOB_NAME  VARCHAR(80) NOT NULL,
    JOB_GROUP VARCHAR(80) NOT NULL,
    IS_VOLATILE VARCHAR(1) NOT NULL,
    DESCRIPTION VARCHAR(120) NULL,
    NEXT_FIRE_TIME BIGINT(13) NULL,
    PREV_FIRE_TIME BIGINT(13) NULL,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT(13) NOT NULL,
    END_TIME BIGINT(13) NULL,
    CALENDAR_NAME VARCHAR(80) NULL,
    MISFIRE_INSTR SMALLINT(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_SIMPLE_TRIGGERS
  (
    TRIGGER_NAME VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    REPEAT_COUNT BIGINT(7) NOT NULL,
    REPEAT_INTERVAL BIGINT(12) NOT NULL,
    TIMES_TRIGGERED BIGINT(7) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_CRON_TRIGGERS
  (
    TRIGGER_NAME VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    CRON_EXPRESSION VARCHAR(80) NOT NULL,
    TIME_ZONE_ID VARCHAR(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_BLOB_TRIGGERS
  (
    TRIGGER_NAME VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_TRIGGER_LISTENERS
  (
    TRIGGER_NAME  VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    TRIGGER_LISTENER VARCHAR(80) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE QRTZ_CALENDARS
  (
    CALENDAR_NAME  VARCHAR(80) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;



CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
  (
    TRIGGER_GROUP  VARCHAR(80) NOT NULL, 
    PRIMARY KEY (TRIGGER_GROUP)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_FIRED_TRIGGERS
  (
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(80) NOT NULL,
    TRIGGER_GROUP VARCHAR(80) NOT NULL,
    IS_VOLATILE VARCHAR(1) NOT NULL,
    INSTANCE_NAME VARCHAR(80) NOT NULL,
    FIRED_TIME BIGINT(13) NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(80) NULL,
    JOB_GROUP VARCHAR(80) NULL,
    IS_STATEFUL VARCHAR(1) NULL,
    REQUESTS_RECOVERY VARCHAR(1) NULL,
    PRIMARY KEY (ENTRY_ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_SCHEDULER_STATE
  (
    INSTANCE_NAME VARCHAR(80) NOT NULL,
    LAST_CHECKIN_TIME BIGINT(13) NOT NULL,
    CHECKIN_INTERVAL BIGINT(13) NOT NULL,
    RECOVERER VARCHAR(80) NULL,
    PRIMARY KEY (INSTANCE_NAME)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE QRTZ_LOCKS
  (
    LOCK_NAME  VARCHAR(40) NOT NULL, 
    PRIMARY KEY (LOCK_NAME)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO QRTZ_LOCKS values('TRIGGER_ACCESS');
INSERT INTO QRTZ_LOCKS values('JOB_ACCESS');
INSERT INTO QRTZ_LOCKS values('CALENDAR_ACCESS');
INSERT INTO QRTZ_LOCKS values('STATE_ACCESS');
INSERT INTO QRTZ_LOCKS values('MISFIRE_ACCESS');



-- 资源库
DROP TABLE IF EXISTS dfs_repository;
CREATE TABLE dfs_repository (
  repository_id integer NOT NULL,
  repository_name varchar(32) default NULL,
  user_name varchar(32) default NULL,
  password varchar(32) default NULL,
  version varchar(16) default NULL,
  db_host varchar(32) default NULL,
  db_port varchar(8) default NULL,
  db_name varchar(64) default NULL,
  db_type varchar(32) default NULL,
  db_access varchar(16) default NULL,
  PRIMARY KEY  (repository_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


-- 角色
DROP TABLE IF EXISTS dfs_role;
CREATE TABLE dfs_role (
  role_id integer NOT NULL,
  role_name varchar(32) unique,
  description varchar(255) default NULL,
  isSystemRole integer default NULL,
  PRIMARY KEY  (role_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- 权限
DROP TABLE IF EXISTS dfs_priviledge;
CREATE TABLE dfs_priviledge (
  priviledge_id bigint NOT NULL,
  name varchar(128),
  parent_priviledge_id bigint,
  PRIMARY KEY  (priviledge_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- 角色权限
DROP TABLE IF EXISTS dfs_role_priviledge;
CREATE TABLE dfs_role_priviledge (
  priviledge_id integer ,
  role_id integer ,
  PRIMARY KEY  (priviledge_id,role_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- 用户
DROP TABLE IF EXISTS dfs_user;
CREATE TABLE dfs_user (
  user_id integer NOT NULL,
  user_name varchar(32) unique,
  password varchar(32) default NULL,
  nick_name varchar(32) default NULL,
  email varchar(32) default NULL,
  mobilephone varchar(32) default NULL,
  description varchar(255) default NULL,
  is_system_user integer default NULL,
  PRIMARY KEY  (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT dfs_user VALUES (0,'admin','admin','管理员','','','系统管理员用户,拥有所有资源授权和所有操作权限',1);

-- 用户资源
DROP TABLE IF EXISTS dfs_user_resource;
CREATE TABLE dfs_user_resource (
  user_id integer,
  resource_id integer ,
  PRIMARY KEY  (user_id,resource_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


-- 用户角色
DROP TABLE IF EXISTS dfs_user_role;
CREATE TABLE dfs_user_role (
  user_id integer ,
  role_id integer ,
  PRIMARY KEY  (user_id,role_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



-- 节点
DROP TABLE IF EXISTS dfs_node;
CREATE TABLE dfs_node(
  node_id integer NOT NULL,
  name varchar(128),
  ip varchar(128),
  port integer,
  description varchar(255),
  nodeGroup_id integer,
  status varchar(50),
  cpupercent double(10,0)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- 节点组
DROP TABLE IF EXISTS dfs_nodeGroup;
CREATE TABLE dfs_nodeGroup(
  nodeGroup_id integer NOT NULL,
  name varchar(128),
  description varchar(255)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
insert into dfs_nodegroup VALUES(1,'默认分组','默认分组');

-- 资源库
DROP TABLE IF EXISTS dfs_repository;
CREATE TABLE dfs_repository (
  c_repository_id integer NOT NULL,
  c_repository_name varchar(32) default NULL,
  c_user_name varchar(32) default NULL,
  c_password varchar(32) default NULL,
  c_version varchar(16) default NULL,
  c_db_host varchar(32) default NULL,
  c_db_port varchar(8) default NULL,
  c_db_name varchar(64) default NULL,
  c_db_type varchar(32) default NULL,
  c_db_access varchar(16) default NULL,
  PRIMARY KEY  (c_repository_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- 方案对应的流程图
DROP TABLE IF EXISTS dfs_schema_image;
CREATE TABLE dfs_schema_image(
  id integer NOT NULL,
  schemaid integer,
  image binary
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


-- 任务执行日志
DROP TABLE IF EXISTS dfs_task_execute_log;
CREATE TABLE dfs_task_execute_log(
    ID VARCHAR(80) NOT NULL PRIMARY KEY,
	JOBNAME VARCHAR(80) NOT NULL ,
	JOBGROUP VARCHAR(80),
	SCHEMANAME VARCHAR(200),
	SCHEMATYPE VARCHAR(50),
	STATUS VARCHAR(50),
	START_TIME TIMESTAMP NULL,
	END_TIME TIMESTAMP NULL,
	CONTINUED_TIME NUMERIC(13,1),
	LOGMSG LONGTEXT,
	NODE_ID INTEGER
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- 方案的更新日志
DROP TABLE IF EXISTS dfs_schema_update_log;
CREATE TABLE dfs_schema_update_log(
    ID INTEGER NOT NULL PRIMARY KEY,
    SCHEMANAME VARCHAR(200),
    CREATETIME timestamp,
    UPDATETIME timestamp
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- 方案的更新记录信息--
CREATE TABLE dfs_schema_update_info(
	ID INTEGER NOT NULL ,
	SCHEMAID  INTEGER NULL ,
	SCHEMATYPE  VARCHAR(50) NULL ,
	CREATEDATE timestamp NULL , 
	UPDATEDATE  timestamp NULL ,
	OPERATETYPE  VARCHAR(50) NULL ,
	SCHEMAIMAGE  longblob NULL ,
	SCHEMANAME varchar(255) DEFAULT NULL,
    ID_DIRECTORY bigint(20) DEFAULT NULL,
    USERNAME varchar(255) DEFAULT NULL,
    ISPUBLISH int(10) DEFAULT NULL,
    DESCRIPTION LONGTEXT,
PRIMARY KEY (`ID`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- 系统操作日志表--
DROP TABLE IF EXISTS dfs_operator_log;
CREATE TABLE dfs_operator_log(
      ID INTEGER NOT NULL ,
      LOGTIME  timestamp NULL,
      USERNAME  VARCHAR(255) NULL,
      USERIP  VARCHAR(255) NULL,
      OPERATORTYPE   VARCHAR(50) NULL,
      OPERATOROBJECT  VARCHAR(255) NULL,
      CONTENT text NULL,
      STATUS VARCHAR(50) NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS sec_smtpinfo;
CREATE TABLE sec_smtpinfo (
 ID  int(11) NOT NULL ,
 SMTPHOST  varchar(50) DEFAULT NULL ,
 SMTPPORT  varchar(20) DEFAULT NULL ,
 MAILACCOUNT  varchar(80) DEFAULT NULL ,
 USENAME  varchar(50) DEFAULT NULL ,
 PASSWORD  varchar(50) DEFAULT NULL ,
PRIMARY KEY (ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;